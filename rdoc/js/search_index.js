var search_data = {"index":{"searchIndex":["solandraobject","associationtypemismatch","associations","builder","belongsto","classmethods","attributemethods","classmethods","base","cassandrafindermethods","classmethods","deleterestrictionerror","findermethods","modificationmethods","namedscope","classmethods","railtie","recordnotfound","recordnotsaved","reflection","classmethods","macroreflection","relation","searchmethods","solandraobjecterror","spawnmethods","sunspotadapters","solandraobjectdataaccessor","solandraobjectinstanceadapter","validations","classmethods","uniquenessvalidator","==()","==()","all()","any?()","apply_default_scope()","attribute()","attribute_names()","belongs_to()","build()","class_name()","count()","create_reflection()","default_page_size()","default_scope()","delete()","delete_all()","destroy()","destroy_all()","empty?()","except()","exists?()","extending()","find()","first()","first!()","freeze()","frozen?()","fulltext()","greater_than()","group()","has_and_belongs_to_many()","has_many()","has_one()","id()","inspect()","klass()","last()","last!()","less_than()","limit()","load()","load_all()","logger()","many?()","method_missing()","multi_find()","new()","new()","new()","offset()","only()","order()","page()","paginate()","per_page()","query_parser()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","reload()","reset()","respond_to?()","results()","reverse_order()","save_with_record_class()","scope()","scoped()","search()","search_ids()","select=()","size()","sunspot_search()","to_a()","total_pages()","unscoped()","valid_scope_name?()","validate_each()","validates_uniqueness_of()","where()","where_not()","readme"],"info":[["DatastaxRails","","SolandraObject.html","","<p>This is shamelessly ripped from Active Record\n"],["SolandraObject::AssociationTypeMismatch","","SolandraObject/AssociationTypeMismatch.html","",""],["SolandraObject::Associations","","SolandraObject/Associations.html","","<p>DatastaxRails Has And Belongs To Many Association\n"],["SolandraObject::Associations::Builder","","SolandraObject/Associations/Builder.html","",""],["SolandraObject::Associations::Builder::BelongsTo","","SolandraObject/Associations/Builder/BelongsTo.html","",""],["SolandraObject::Associations::ClassMethods","","SolandraObject/Associations/ClassMethods.html","",""],["SolandraObject::AttributeMethods","","SolandraObject/AttributeMethods.html","",""],["SolandraObject::AttributeMethods::ClassMethods","","SolandraObject/AttributeMethods/ClassMethods.html","",""],["SolandraObject::Base","","SolandraObject/Base.html","","<p>Solandra Object\n<p>Solandra Object-based objects differ from Active Record objects in that\nthey specify their …\n"],["SolandraObject::CassandraFinderMethods","","SolandraObject/CassandraFinderMethods.html","",""],["SolandraObject::CassandraFinderMethods::ClassMethods","","SolandraObject/CassandraFinderMethods/ClassMethods.html","",""],["SolandraObject::DeleteRestrictionError","","SolandraObject/DeleteRestrictionError.html","",""],["SolandraObject::FinderMethods","","SolandraObject/FinderMethods.html","",""],["SolandraObject::ModificationMethods","","SolandraObject/ModificationMethods.html","",""],["SolandraObject::NamedScope","","SolandraObject/NamedScope.html","",""],["SolandraObject::NamedScope::ClassMethods","","SolandraObject/NamedScope/ClassMethods.html","",""],["SolandraObject::Railtie","","SolandraObject/Railtie.html","",""],["SolandraObject::RecordNotFound","","SolandraObject/RecordNotFound.html","",""],["SolandraObject::RecordNotSaved","","SolandraObject/RecordNotSaved.html","",""],["SolandraObject::Reflection","","SolandraObject/Reflection.html","",""],["SolandraObject::Reflection::ClassMethods","","SolandraObject/Reflection/ClassMethods.html","","<p>Reflection enables interrogation of Solandra Object classes and objects\nabout their associations and …\n"],["SolandraObject::Reflection::MacroReflection","","SolandraObject/Reflection/MacroReflection.html","","<p>Abstract base class for AggregateReflection and AssociationReflection.\nObjects of AggregateReflection …\n"],["SolandraObject::Relation","","SolandraObject/Relation.html","",""],["SolandraObject::SearchMethods","","SolandraObject/SearchMethods.html","",""],["SolandraObject::SolandraObjectError","","SolandraObject/SolandraObjectError.html","",""],["SolandraObject::SpawnMethods","","SolandraObject/SpawnMethods.html","",""],["SolandraObject::SunspotAdapters","","SolandraObject/SunspotAdapters.html","","<p>This module provides Sunspot Adapter implementations for Solandra Object\nmodels\n"],["SolandraObject::SunspotAdapters::SolandraObjectDataAccessor","","SolandraObject/SunspotAdapters/SolandraObjectDataAccessor.html","",""],["SolandraObject::SunspotAdapters::SolandraObjectInstanceAdapter","","SolandraObject/SunspotAdapters/SolandraObjectInstanceAdapter.html","",""],["SolandraObject::Validations","","SolandraObject/Validations.html","",""],["SolandraObject::Validations::ClassMethods","","SolandraObject/Validations/ClassMethods.html","",""],["SolandraObject::Validations::UniquenessValidator","","SolandraObject/Validations/UniquenessValidator.html","",""],["==","SolandraObject::Reflection::MacroReflection","SolandraObject/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>datastax_rails</code> attribute, and …\n"],["==","SolandraObject::Relation","SolandraObject/Relation.html#method-i-3D-3D","(other)","<p>Returns true if the two relations have the same query parameters\n"],["all","SolandraObject::Relation","SolandraObject/Relation.html#method-i-all","()",""],["any?","SolandraObject::Relation","SolandraObject/Relation.html#method-i-any-3F","()","<p>Returns true if there are any results given the current criteria\n"],["apply_default_scope","SolandraObject::NamedScope::ClassMethods","SolandraObject/NamedScope/ClassMethods.html#method-i-apply_default_scope","()",""],["attribute","SolandraObject::AttributeMethods::ClassMethods","SolandraObject/AttributeMethods/ClassMethods.html#method-i-attribute","(name, options)",""],["attribute_names","SolandraObject::Base","SolandraObject/Base.html#method-c-attribute_names","()","<p>Returns an array of attribute names as strings\n"],["belongs_to","SolandraObject::Associations::ClassMethods","SolandraObject/Associations/ClassMethods.html#method-i-belongs_to","(name, options = {})",""],["build","SolandraObject::Associations::Builder::BelongsTo","SolandraObject/Associations/Builder/BelongsTo.html#method-i-build","()",""],["class_name","SolandraObject::Reflection::MacroReflection","SolandraObject/Reflection/MacroReflection.html#method-i-class_name","()","<p>Returns the class name for the macro.\n<p><code>composed_of :balance, :class_name =&gt; 'Money'</code> returns\n<code>'Money'</code> …\n"],["count","SolandraObject::Relation","SolandraObject/Relation.html#method-i-count","()","<p>Returns the total number of entries that match the given search. This means\nthe total number of matches …\n"],["create_reflection","SolandraObject::Reflection::ClassMethods","SolandraObject/Reflection/ClassMethods.html#method-i-create_reflection","(macro, name, options, solandra_object)",""],["default_page_size","SolandraObject::Base","SolandraObject/Base.html#method-c-default_page_size","()","<p>SOLR always paginates all requests.  There is no way to disable it, so we\nare setting the default page …\n"],["default_scope","SolandraObject::Relation","SolandraObject/Relation.html#method-i-default_scope","()","<p>Gets a default scope with no conditions or search attributes set.\n"],["delete","SolandraObject::ModificationMethods","SolandraObject/ModificationMethods.html#method-i-delete","(id)","<p>TODO: Find a way to delete from both without instantiating\n"],["delete_all","SolandraObject::ModificationMethods","SolandraObject/ModificationMethods.html#method-i-delete_all","(conditions = nil)","<p>TODO: Find a way to delete from both without instantiating\n"],["destroy","SolandraObject::ModificationMethods","SolandraObject/ModificationMethods.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id, the object\nis instantiated first, therefore …\n"],["destroy_all","SolandraObject::ModificationMethods","SolandraObject/ModificationMethods.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["empty?","SolandraObject::Relation","SolandraObject/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no results given the current criteria\n"],["except","SolandraObject::SpawnMethods","SolandraObject/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Post</span>.<span class=\"ruby-identifier\">where</span>(:<span class=\"ruby-identifier\">active</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">true</span>).<span class=\"ruby-identifier\">order</span>(<span class=\"ruby-string\">'id'</span>).<span class=\"ruby-identifier\">except</span>(:<span class=\"ruby-identifier\">order</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["exists?","SolandraObject::Relation","SolandraObject/Relation.html#method-i-exists-3F","()",""],["extending","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-extending","(*modules)","<p>Used to extend a scope with additional methods, either through  a module or\na block provided\n<p>The object …\n"],["find","SolandraObject::FinderMethods","SolandraObject/FinderMethods.html#method-i-find","(*args)","<p>Find operates with four different retrieval approaches:\n<p>Find by id - This can either be a specific id …\n"],["first","SolandraObject::FinderMethods","SolandraObject/FinderMethods.html#method-i-first","(*args)","<p>A convenience wrapper for <code>find(:first, *args)</code>. You can pass in\nall the same arguments to this method …\n"],["first!","SolandraObject::FinderMethods","SolandraObject/FinderMethods.html#method-i-first-21","()","<p>Same as <code>first</code> but raises\n<code>SolandraObject::RecordNotFound</code> if no record is found. Note\nthat <code>first!</code> accepts …\n"],["freeze","SolandraObject::Base","SolandraObject/Base.html#method-i-freeze","()","<p>Freeze the attributes hash such that associations are still accessible,\neven on destroyed records.\n"],["frozen?","SolandraObject::Base","SolandraObject/Base.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["fulltext","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-fulltext","(query, opts = {})","<p>Specifies a full text search string to be processed by SOLR\n\n<pre>Model.fulltext(&quot;john smith&quot;)</pre>\n<p>You can also pass …\n"],["greater_than","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-greater_than","(value)","<p>See documentation for <code>where</code>\n"],["group","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-group","(*attrs)","<p>Group results by one or more attributes only returning the top result for\neach group.\n\n<pre>Model.group(:program_id)</pre>\n"],["has_and_belongs_to_many","SolandraObject::Associations::ClassMethods","SolandraObject/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, options = {})",""],["has_many","SolandraObject::Associations::ClassMethods","SolandraObject/Associations/ClassMethods.html#method-i-has_many","(name, options = {})",""],["has_one","SolandraObject::Associations::ClassMethods","SolandraObject/Associations/ClassMethods.html#method-i-has_one","(name, options = {})",""],["id","SolandraObject::SunspotAdapters::SolandraObjectInstanceAdapter","SolandraObject/SunspotAdapters/SolandraObjectInstanceAdapter.html#method-i-id","()","<p>Return the primary key for the adapted instance\n<p>Returns\n<p>String &mdash; UUID of the model\n"],["inspect","SolandraObject::Relation","SolandraObject/Relation.html#method-i-inspect","(just_me = false)",""],["klass","SolandraObject::Reflection::MacroReflection","SolandraObject/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, :class_name =&gt; 'Money'</code> returns the\nMoney class …\n"],["last","SolandraObject::FinderMethods","SolandraObject/FinderMethods.html#method-i-last","(*args)","<p>A convenience wrapper for <code>find(:last, *args)</code>. You can pass in\nall the same arguments to this method as …\n"],["last!","SolandraObject::FinderMethods","SolandraObject/FinderMethods.html#method-i-last-21","()","<p>Same as <code>last</code> but raises\n<code>SolandraObject::RecordNotFound</code> if no record is found. Note\nthat <code>last!</code> accepts …\n"],["less_than","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-less_than","(value)","<p>See documentation for <code>where</code>\n"],["limit","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-limit","(value)","<p>Limit a single page to <code>value</code> records\n\n<pre>Model.limit(1)\nModel.per_page(50)</pre>\n<p>Normally SolandraObject searches …\n"],["load","SolandraObject::SunspotAdapters::SolandraObjectDataAccessor","SolandraObject/SunspotAdapters/SolandraObjectDataAccessor.html#method-i-load","(id)","<p>Get one SolandraObject instance out of the database by ID\n<p>PArameters\n<p>id&lt;String&gt; &mdash; UUID of the the model …\n"],["load_all","SolandraObject::SunspotAdapters::SolandraObjectDataAccessor","SolandraObject/SunspotAdapters/SolandraObjectDataAccessor.html#method-i-load_all","(ids)","<p>Get a collection of SolandraObject instances out of the database by ID\n<p>Parameters\n<p>ids&lt;Array&gt; &mdash; UUIDs …\n"],["logger","SolandraObject::Base","SolandraObject/Base.html#method-c-logger","()",""],["many?","SolandraObject::Relation","SolandraObject/Relation.html#method-i-many-3F","()","<p>Returns true if there are multiple results given the current criteria\n"],["method_missing","SolandraObject::Relation","SolandraObject/Relation.html#method-i-method_missing","(method, *args, &block)",""],["multi_find","SolandraObject::CassandraFinderMethods::ClassMethods","SolandraObject/CassandraFinderMethods/ClassMethods.html#method-i-multi_find","(keys)",""],["new","SolandraObject::Base","SolandraObject/Base.html#method-c-new","(attributes = {})",""],["new","SolandraObject::Reflection::MacroReflection","SolandraObject/Reflection/MacroReflection.html#method-c-new","(macro, name, options, solandra_object)",""],["new","SolandraObject::Relation","SolandraObject/Relation.html#method-i-new","(*args, &block)","<p>Constructs a new instance of the class this relation points to\n"],["offset","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-offset","(value)","<p>Sets an offset into the result set to start looking from\n\n<pre>Model.offset(1000)</pre>\n"],["only","SolandraObject::SpawnMethods","SolandraObject/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n<p>Example:\n\n<pre>Post.order('id').only(:where) ...</pre>\n"],["order","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-order","(attribute)","<p>Orders the result set by a particular attribute.  Note that text fields may\nnot be used for ordering …\n"],["page","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-page","(value)","<p>Sets the page number to retrieve\n\n<pre>Model.page(2)</pre>\n"],["paginate","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-paginate","(options = {})","<p>WillPaginate compatible method for paginating\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Model</span>.<span class=\"ruby-identifier\">paginate</span>(:<span class=\"ruby-identifier\">page</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>, :<span class=\"ruby-identifier\">per_page</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">10</span>)\n</pre>\n"],["per_page","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-per_page","(value)",""],["query_parser","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-query_parser","(attribute)","<p>By default, SolandraObject uses the LuceneQueryParser.  Note that this is a\nchange from the underlying …\n"],["reflect_on_all_associations","SolandraObject::Reflection::ClassMethods","SolandraObject/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","SolandraObject::Reflection::ClassMethods","SolandraObject/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","SolandraObject::Reflection::ClassMethods","SolandraObject/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre>Account.reflect_on_association(:owner) ...</pre>\n"],["reload","SolandraObject::Relation","SolandraObject/Relation.html#method-i-reload","()","<p>Reloads the results from Solr\n"],["reset","SolandraObject::Relation","SolandraObject/Relation.html#method-i-reset","()","<p>Empties out the current results.  The next call to to_a will re-run the\nquery.\n"],["respond_to?","SolandraObject::Base","SolandraObject/Base.html#method-c-respond_to-3F","(method_id, include_private = false)",""],["results","SolandraObject::Relation","SolandraObject/Relation.html#method-i-results","()",""],["reverse_order","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-reverse_order","()","<p>Reverses the order of the results\n\n<pre>Model.order(:name).reverse_order\n  is equivalent to\nModel.order(:name ...</pre>\n"],["save_with_record_class","SolandraObject::Base","SolandraObject/Base.html#method-i-save_with_record_class","(*args)",""],["scope","SolandraObject::NamedScope::ClassMethods","SolandraObject/NamedScope/ClassMethods.html#method-i-scope","(name, scope_options = {})","<p>Allows the creation of named scopes\n"],["scoped","SolandraObject::NamedScope::ClassMethods","SolandraObject/NamedScope/ClassMethods.html#method-i-scoped","()",""],["search","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-search","(&block)","<p>Direct access to Sunspot search method.\n\n<pre>Model.search do\n  fulltext 'best pizza'\n\n  with :blog_id, 1\n  ...</pre>\n"],["search_ids","SolandraObject::Base","SolandraObject/Base.html#method-c-search_ids","(&block)",""],["select=","SolandraObject::SunspotAdapters::SolandraObjectDataAccessor","SolandraObject/SunspotAdapters/SolandraObjectDataAccessor.html#method-i-select-3D","(value)","<p>Set the fields to select from the database. This will be passed to\nSolandraObject\n"],["size","SolandraObject::Relation","SolandraObject/Relation.html#method-i-size","()","<p>Returns the size of the total result set for the given criteria NOTE that\nthis takes pagination into …\n"],["sunspot_search","SolandraObject::Relation","SolandraObject/Relation.html#method-i-sunspot_search","()","<p>Creates and returns an actual sunspot search object based on the\ninformation that is stored in this  …\n"],["to_a","SolandraObject::Relation","SolandraObject/Relation.html#method-i-to_a","()","<p>Actually executes the query if not already executed. Returns a standard\narray thus no more methods may …\n"],["total_pages","SolandraObject::Relation","SolandraObject/Relation.html#method-i-total_pages","()","<p>Returns the total number of pages required to display the results given the\ncurrent page size.  Used …\n"],["unscoped","SolandraObject::NamedScope::ClassMethods","SolandraObject/NamedScope/ClassMethods.html#method-i-unscoped","()",""],["valid_scope_name?","SolandraObject::NamedScope::ClassMethods","SolandraObject/NamedScope/ClassMethods.html#method-i-valid_scope_name-3F","(name)","<p>with_scope lets you apply options to inner block incrementally. It takes a\nhash and the keys must be …\n"],["validate_each","SolandraObject::Validations::UniquenessValidator","SolandraObject/Validations/UniquenessValidator.html#method-i-validate_each","(record, attribute, value)",""],["validates_uniqueness_of","SolandraObject::Validations::ClassMethods","SolandraObject/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)",""],["where","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-where","(attribute)","<p>Specifies restrictions (scoping) on the result set. Expects a hash in the\nform +attribute =&gt; value+ …\n"],["where_not","SolandraObject::SearchMethods","SolandraObject/SearchMethods.html#method-i-where_not","(attribute)","<p>Specifies restrictions (scoping) that should not match the result set.\nExpects a hash in the form +attribute …\n"],["README","","README_rdoc.html","","<p>SolandraObject\n<p>SolandraObject merges the functionality of Gotime’s CassandraObject and\nSunspot::Rails …\n"]],"longSearchIndex":["solandraobject","solandraobject::associationtypemismatch","solandraobject::associations","solandraobject::associations::builder","solandraobject::associations::builder::belongsto","solandraobject::associations::classmethods","solandraobject::attributemethods","solandraobject::attributemethods::classmethods","solandraobject::base","solandraobject::cassandrafindermethods","solandraobject::cassandrafindermethods::classmethods","solandraobject::deleterestrictionerror","solandraobject::findermethods","solandraobject::modificationmethods","solandraobject::namedscope","solandraobject::namedscope::classmethods","solandraobject::railtie","solandraobject::recordnotfound","solandraobject::recordnotsaved","solandraobject::reflection","solandraobject::reflection::classmethods","solandraobject::reflection::macroreflection","solandraobject::relation","solandraobject::searchmethods","solandraobject::solandraobjecterror","solandraobject::spawnmethods","solandraobject::sunspotadapters","solandraobject::sunspotadapters::solandraobjectdataaccessor","solandraobject::sunspotadapters::solandraobjectinstanceadapter","solandraobject::validations","solandraobject::validations::classmethods","solandraobject::validations::uniquenessvalidator","solandraobject::reflection::macroreflection#==()","solandraobject::relation#==()","solandraobject::relation#all()","solandraobject::relation#any?()","solandraobject::namedscope::classmethods#apply_default_scope()","solandraobject::attributemethods::classmethods#attribute()","solandraobject::base::attribute_names()","solandraobject::associations::classmethods#belongs_to()","solandraobject::associations::builder::belongsto#build()","solandraobject::reflection::macroreflection#class_name()","solandraobject::relation#count()","solandraobject::reflection::classmethods#create_reflection()","solandraobject::base::default_page_size()","solandraobject::relation#default_scope()","solandraobject::modificationmethods#delete()","solandraobject::modificationmethods#delete_all()","solandraobject::modificationmethods#destroy()","solandraobject::modificationmethods#destroy_all()","solandraobject::relation#empty?()","solandraobject::spawnmethods#except()","solandraobject::relation#exists?()","solandraobject::searchmethods#extending()","solandraobject::findermethods#find()","solandraobject::findermethods#first()","solandraobject::findermethods#first!()","solandraobject::base#freeze()","solandraobject::base#frozen?()","solandraobject::searchmethods#fulltext()","solandraobject::searchmethods#greater_than()","solandraobject::searchmethods#group()","solandraobject::associations::classmethods#has_and_belongs_to_many()","solandraobject::associations::classmethods#has_many()","solandraobject::associations::classmethods#has_one()","solandraobject::sunspotadapters::solandraobjectinstanceadapter#id()","solandraobject::relation#inspect()","solandraobject::reflection::macroreflection#klass()","solandraobject::findermethods#last()","solandraobject::findermethods#last!()","solandraobject::searchmethods#less_than()","solandraobject::searchmethods#limit()","solandraobject::sunspotadapters::solandraobjectdataaccessor#load()","solandraobject::sunspotadapters::solandraobjectdataaccessor#load_all()","solandraobject::base::logger()","solandraobject::relation#many?()","solandraobject::relation#method_missing()","solandraobject::cassandrafindermethods::classmethods#multi_find()","solandraobject::base::new()","solandraobject::reflection::macroreflection::new()","solandraobject::relation#new()","solandraobject::searchmethods#offset()","solandraobject::spawnmethods#only()","solandraobject::searchmethods#order()","solandraobject::searchmethods#page()","solandraobject::searchmethods#paginate()","solandraobject::searchmethods#per_page()","solandraobject::searchmethods#query_parser()","solandraobject::reflection::classmethods#reflect_on_all_associations()","solandraobject::reflection::classmethods#reflect_on_all_autosave_associations()","solandraobject::reflection::classmethods#reflect_on_association()","solandraobject::relation#reload()","solandraobject::relation#reset()","solandraobject::base::respond_to?()","solandraobject::relation#results()","solandraobject::searchmethods#reverse_order()","solandraobject::base#save_with_record_class()","solandraobject::namedscope::classmethods#scope()","solandraobject::namedscope::classmethods#scoped()","solandraobject::searchmethods#search()","solandraobject::base::search_ids()","solandraobject::sunspotadapters::solandraobjectdataaccessor#select=()","solandraobject::relation#size()","solandraobject::relation#sunspot_search()","solandraobject::relation#to_a()","solandraobject::relation#total_pages()","solandraobject::namedscope::classmethods#unscoped()","solandraobject::namedscope::classmethods#valid_scope_name?()","solandraobject::validations::uniquenessvalidator#validate_each()","solandraobject::validations::classmethods#validates_uniqueness_of()","solandraobject::searchmethods#where()","solandraobject::searchmethods#where_not()",""]}}